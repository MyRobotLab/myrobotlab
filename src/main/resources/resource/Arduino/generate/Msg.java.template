package org.myrobotlab.arduino;


import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.util.Arrays;
import java.util.concurrent.atomic.AtomicInteger;

import org.myrobotlab.logging.Level;

import org.myrobotlab.arduino.virtual.MrlComm;
import org.myrobotlab.string.StringUtil;

/**
 * <pre>
 * 
 Welcome to Msg.java
 Its created by running ArduinoMsgGenerator
 which combines the MrlComm message schema (src/resource/Arduino/arduinoMsg.schema)
 with the cpp template (src/resource/Arduino/generate/Msg.java.template)

   Schema Type Conversions

  Schema      ARDUINO          Java              Range
  none    byte/unsigned char    int (cuz Java byte bites)    1 byte - 0 to 255
  boolean    boolean          boolean              0 1
    b16      int            int (short)            2 bytes  -32,768 to 32,767
    b32      long          int                4 bytes -2,147,483,648 to 2,147,483, 647
    bu32    unsigned long      long              0 to 4,294,967,295
    str      char*, size        String              variable length
    []      byte[], size      int[]              variable length

 All message editing should be done in the arduinoMsg.schema

 The binary wire format of an %javaArduinoClass% is:

 MAGIC_NUMBER|MSG_SIZE|METHOD_NUMBER|PARAM0|PARAM1 ...
 
 </pre>

 */

import org.myrobotlab.logging.LoggerFactory;
import org.myrobotlab.logging.LoggingFactory;
import org.myrobotlab.service.VirtualArduino;

import java.io.FileOutputStream;
import java.util.Arrays;
import org.myrobotlab.service.interfaces.MrlCommPublisher;
import org.myrobotlab.service.Runtime;
import org.myrobotlab.service.Servo;
import org.myrobotlab.service.interfaces.SerialDevice;
import org.slf4j.Logger;

/**
 * Singlton messaging interface to an %javaArduinoClass%
 *
 * @author GroG
 *
 */

public class %javaClass% {

  // TODO: pick a more reasonable timeout.. 3 seconds is high.
  private static final int ACK_TIMEOUT = 3000;
  public transient final static Logger log = LoggerFactory.getLogger(%javaClass%.class);
  public static final int MAX_MSG_SIZE = 64;
  public static final int MAGIC_NUMBER = 170; // 10101010
  public static final int MRLCOMM_VERSION = %MRLCOMM_VERSION%;
  // send buffer
  private int sendBufferSize = 0;
  private int sendBuffer[] = new int[MAX_MSG_SIZE];
  // recv buffer
  private int ioCmd[] = new int[MAX_MSG_SIZE];
  private AtomicInteger byteCount = new AtomicInteger(0);
  private int msgSize = 0;
  // ------ device type mapping constants
  private int method = -1;
  public boolean debug = false;
  // when using a real service, invoke should be true, for unit tests, this should be false.
  private boolean invoke = %invokeIfService%;
  
  private int errorServiceToHardwareRxCnt = 0;
  private int errorHardwareToServiceRxCnt = 0;
  
  boolean ackEnabled = %ackEnabled%;
  private volatile boolean clearToSend = %clearToSend%;
  public static class AckLock {
    // track if there is a pending message, when sending a message
    // this goes to true. when getting an ack it goes to false.
    volatile boolean pendingMessage = false;
  }
  transient AckLock ackRecievedLock = new AckLock();
  // recording related
  transient OutputStream record = null;
  transient StringBuilder rxBuffer = new StringBuilder();
  transient StringBuilder txBuffer = new StringBuilder();  

%javaDeviceTypes%    
%javaDefines%

/**
 * These methods will be invoked from the Msg class as callbacks from MrlComm.
 */
  
%javaGeneratedCallBacks%  
  

  public %javaClass%(%javaArduinoClass% arduino, SerialDevice serial) {
    this.arduino = arduino;
    this.serial = serial;
  }
  
  public void begin(SerialDevice serial){
    this.serial = serial;
  }

  // transient private Msg instance;

  // ArduinoSerialCallBacks - TODO - extract interface
  transient private %javaArduinoClass% arduino;
  
  transient private SerialDevice serial;
  
  public void processCommand(int[] ioCmd) {
    int startPos = 0;
    method = ioCmd[startPos];
    // always process mrlbegin..
    if (debug) { 
      log.info("Process Command: {} Method: {}", Msg.methodToString(method), ioCmd);
    }
    
    if (method == PUBLISH_ACK) {
      // We saw an ack!  we ack this internally right away, and down below in the generated code, 
      // call publishAck on the MrlCommPublisher
      Integer function = ioCmd[startPos+1]; // bu8
      ackReceived(function);
    }
    
    if (method != PUBLISH_MRL_COMM_BEGIN) {
      if (!clearToSend) {
        log.warn("Not Clear to send yet.  Dumping command {}", ioCmd);
        System.err.println("\nDumping command not clear to send.\n");
        return;
      }
    } else {
      // Process!
      log.info("Clear to process!!!!!!!!!!!!!!!!!!");
      this.clearToSend = true;
    }
    switch (method) {
%javaHandleCases%    
    }
  }
  

  // Java-land --to--> MrlComm
%javaMethods%

  public static String methodToString(int method) {
    switch (method) {
%methodToString%
    default: {
      return "ERROR UNKNOWN METHOD (" + Integer.toString(method) + ")";

    } // default
    }
  }

  public String str(int[] buffer, int start, int size) {
    byte[] b = new byte[size];
    for (int i = start; i < start + size; ++i){
      b[i - start] = (byte)(buffer[i] & 0xFF);
    }
    return new String(b);
  }

  public int[] subArray(int[] buffer, int start, int size) {    
    return Arrays.copyOfRange(buffer, start, start + size);
  }

  // signed 16 bit bucket
  public int b16(int[] buffer, int start/*=0*/) {
    return  (short)(buffer[start] << 8) + buffer[start + 1];
  }
  
  // signed 32 bit bucket
  public int b32(int[] buffer, int start/*=0*/) {
    return ((buffer[start + 0] << 24) + (buffer[start + 1] << 16)
        + (buffer[start + 2] << 8) + buffer[start + 3]);
  }
  
  // unsigned 32 bit bucket
  public long bu32(int[] buffer, int start/*=0*/) {
    long ret = ((buffer[start + 0] << 24)
        + (buffer[start + 1] << 16)
        + (buffer[start + 2] << 8) + buffer[start + 3]);
    if (ret < 0){
      return 4294967296L + ret;
    }
    
    return ret;
  }

  // float 32 bit bucket
  public float f32(int[] buffer, int start/*=0*/) {
    byte[] b = new byte[4];
    for (int i = 0; i < 4; ++i){
      b[i] = (byte)buffer[start + i];
    }
    float f = ByteBuffer.wrap(b).order(ByteOrder.BIG_ENDIAN).getFloat();
    return f;
  }
  
  public void onBytes(byte[] bytes) {
    if (debug) {
      // debug message.. semi-human readable?
      String byteString = StringUtil.byteArrayToIntString(bytes);
      log.info("onBytes called byteCount: {} data: >{}<", byteCount, byteString);
    }
    // this gives us the current full buffer that was read from the seral
    for (int i = 0 ; i < bytes.length; i++) {
      // For now, let's just call onByte for each byte upcasted as an int.
      Integer newByte = bytes[i] & 0xFF;
      try {
        byteCount.incrementAndGet();
        if (byteCount.get() == 1) {
          if (newByte != MAGIC_NUMBER) {
            byteCount = new AtomicInteger(0);
            msgSize = 0;
            Arrays.fill(ioCmd, 0); // FIXME - optimize - remove
            // warn(String.format("Arduino->MRL error - bad magic number %d - %d rx errors", newByte, ++errorServiceToHardwareRxCnt));
            log.warn("Arduino->MRL error - bad magic number {} - {} rx errors", newByte, ++errorServiceToHardwareRxCnt);
          }
          continue;
        } else if (byteCount.get() == 2) {
          // get the size of message
          if (newByte > 64) {
            byteCount = new AtomicInteger(0);
            msgSize = 0;
            // This is an error scenario.. we should reset our byte count also.
            // error(String.format("Arduino->MRL error %d rx sz errors", ++errorServiceToHardwareRxCnt ));
            log.error("Arduino->MRL error {} rx sz errors", ++errorServiceToHardwareRxCnt);
            continue;
          }
          msgSize = newByte.intValue();
        } else if (byteCount.get() == 3) {
          // This is the method..
          int method = newByte.intValue();
          if (methodToString(method).startsWith("ERROR")) {
            // we've got an error scenario here.. reset the parser and try again!
            log.error("Arduino->MRL error unknown method error. resetting parser.");
            byteCount = new AtomicInteger(0);
            msgSize = 0;
            continue;
          }
          
          // If we're not clear to send, we need to unlock if this is a begin message.
          if (!clearToSend && (method == Msg.PUBLISH_MRL_COMM_BEGIN)) {
            // Clear to send!!
            log.info("Saw the MRL COMM BEGIN!!!!!!!!!!!!! Clear To Send.");
            clearToSend = true;
          } 
          
          if (!clearToSend) {
            log.warn("NOT CLEAR TO SEND! resetting parser!");
            // We opened the port, and we got some data that isn't a Begin message.
            // so, I think we need to reset the parser and continue processing bytes...
            // there will be errors until the next magic byte is seen.
            byteCount = new AtomicInteger(0);
            msgSize = 0;
            continue;
          }
          // we are in a valid parse state.    
          ioCmd[byteCount.get() - 3] = method;
        } else if (byteCount.get() > 3) {
          // This is the body of the message copy it to the buffer
          ioCmd[byteCount.get() - 3] = newByte.intValue();
        } else {
          // the case where byteCount is negative?! not got.  You should probably never see this.
          log.warn("MRL error rx zero/negative size error: {} {}", byteCount, Arrays.copyOf(ioCmd, byteCount.get()));
          //error(String.format("Arduino->MRL error %d rx negsz errors", ++errorServiceToHardwareRxCnt));
          continue;
        }
        // we have a complete message here.
        if (byteCount.get() == 2 + msgSize) {
          // we've received a full message
          int[] actualCommand = Arrays.copyOf(ioCmd, byteCount.get()-2);
          if (debug) {
            log.info("Full message received: {} Data:{}", VirtualMsg.methodToString(ioCmd[0]), actualCommand);
          }
          // process the command.
          processCommand(actualCommand);
          %publishAcks%
          // re-init parser
          Arrays.fill(ioCmd, 0); // optimize remove
          msgSize = 0;
          byteCount = new AtomicInteger(0);
        }
      } catch (Exception e) {
        ++errorHardwareToServiceRxCnt ;
        // error("msg structure violation %d", errorHardwareToServiceRxCnt);
        log.warn("msg_structure violation byteCount {} buffer {}", byteCount, Arrays.copyOf(ioCmd, byteCount.get()), e);
        // TODO: perhaps we could find the first occurance of 170.. and then attempt to re-parse at that point.
        // find the first occurance of 170 in the bytes subbytes
        // Maybe we can just walk the iterater back to the beginning based on the byte count .. and advance it by 1.. and continue.
        i = i - byteCount.get()+1;
        log.error("Trying to resume parsing the byte stream at position {} bytecount: {}", i, byteCount);
        log.error("Original Byte Array: {}", StringUtil.byteArrayToIntString(bytes));
        System.err.println("Try to consume more messages!");
        msgSize = 0;
        byteCount = new AtomicInteger(0);
        // TODO: this is wonky.. what?! 
        i = 0;
        return;
        
        
      }
    }
    return;
  }

  String F(String msg) {
    return msg;
  }
  
  public void publishError(String error) {
    log.error(error);
  }
  
  void appendMessage(ByteArrayOutputStream baos, int b8) throws Exception {
    if ((b8 < 0) || (b8 > 255)) {
      log.error("writeByte overrun - should be  0 <= value <= 255 - value = {}", b8);
    }
    baos.write(b8 & 0xFF);
  }
  
  void appendMessagebool(ByteArrayOutputStream baos, boolean b1) throws Exception {
    if (b1) {
      appendMessage(baos, 1);
    } else {
      appendMessage(baos, 0);
    }
  }

  void appendMessageb16(ByteArrayOutputStream baos, int b16) throws Exception {
    if ((b16 < -32768) || (b16 > 32767)) {
      log.error("writeByte overrun - should be  -32,768 <= value <= 32,767 - value = {}", b16);
    }
    appendMessage(baos, b16 >> 8 & 0xFF);
    appendMessage(baos, b16 & 0xFF);
  }

  void appendMessageb32(ByteArrayOutputStream baos, int b32) throws Exception {
    appendMessage(baos, b32 >> 24 & 0xFF);
    appendMessage(baos, b32 >> 16 & 0xFF);
    appendMessage(baos, b32 >> 8 & 0xFF);
    appendMessage(baos, b32 & 0xFF);
  }
  
  void appendMessagef32(ByteArrayOutputStream baos, float f32) throws Exception {
    //  int x = Float.floatToIntBits(f32);
    byte[] f = ByteBuffer.allocate(4).order(ByteOrder.BIG_ENDIAN).putFloat(f32).array();
    appendMessage(baos, f[3] & 0xFF);
    appendMessage(baos, f[2] & 0xFF);
    appendMessage(baos, f[1] & 0xFF);
    appendMessage(baos, f[0] & 0xFF);
  }
  
  void appendMessagebu32(ByteArrayOutputStream baos, long b32) throws Exception {
    appendMessage(baos, (int)(b32 >> 24 & 0xFF));
    appendMessage(baos, (int)(b32 >> 16 & 0xFF));
    appendMessage(baos, (int)(b32 >> 8 & 0xFF));
    appendMessage(baos, (int)(b32 & 0xFF));
  }

  void appendMessage(ByteArrayOutputStream baos, String str) throws Exception {
    appendMessage(baos, str.getBytes());
  }

  void appendMessage(ByteArrayOutputStream baos, int[] array) throws Exception {
    // write size
    appendMessage(baos, array.length & 0xFF);
    // write data
    for (int i = 0; i < array.length; ++i) {
      appendMessage(baos, array[i] & 0xFF);
    }
  }

  void appendMessage(ByteArrayOutputStream baos, byte[] array) throws Exception {
    // write size
    appendMessage(baos, array.length);
    // write data
    for (int i = 0; i < array.length; ++i) {
      appendMessage(baos, array[i]);
    }
  }
  
  synchronized byte[] sendMessage(ByteArrayOutputStream baos) throws Exception {
    byte[] message = baos.toByteArray();

    if (message.length > MAX_MSG_SIZE) {
      log.error("**** message size {} > MAX_MSG_SIZE {} - not sending ****", MAX_MSG_SIZE, message.length);
      return message;
    }

    if (ackEnabled) {
      // wait for a pending ack to be received before we process our message.^M
      waitForAck();
    }
    // write data if serial not null.
    if (serial != null) {
      // mark it pending before we write the data.
      if (ackEnabled){
        // flip our flag because we're going to send the message now.
        // TODO: is this deadlocked because it's synchronized?!
        // TODO: should this be set regardless of if the serial is null?
        markPending();
      }
      serial.write(message);
      // TODO: if there's an exception, we should clear our pending status?
      if (ackEnabled) {
        // wait for a pending ack to be received before we process our message.^M
        waitForAck();
      }
    }
    return message;
  }
  
  public void markPending() {
    if (debug) {
      log.info("Setting pending flag.");
    }
    synchronized (ackRecievedLock) {
      ackRecievedLock.pendingMessage = true;
      ackRecievedLock.notifyAll();
    }
  }
  
  public boolean isRecording() {
    return record != null;
  }
  
  public void record() throws Exception {
    if (record == null) {
      record = new FileOutputStream(String.format("%s.ard", arduino.getName()));
    }
  }

  public void stopRecording() {
    if (record != null) {
      try {
        record.close();
      } catch (Exception e) {
        log.info("Error closing recording stream. ", e);
      }
      record = null;
    }
  }
  
  public static String deviceTypeToString(int typeId) {
    switch(typeId){
%deviceTypeToString%    
    default: {
      return "unknown";
    }
    }
  }
  
  public void enableAcks(boolean b){
    ackEnabled = b;
    // if (!localOnly){
    // shutdown MrlComm from sending acks
    // below is a method only in Msg.java not in VirtualMsg.java
    // it depends on the definition of enableAck in arduinoMsg.schema  
    // %enableAck%
    // }
  }
  
  public void waitForAck(){
    if (!ackEnabled) {
      return;
    }
    // if there's a pending message, we need to wait for the ack to be received.
    if (ackRecievedLock.pendingMessage) {
      synchronized (ackRecievedLock) {
        try {
          ackRecievedLock.wait(ACK_TIMEOUT);
        } catch (InterruptedException e) {
        }
        if (ackRecievedLock.pendingMessage) {
          log.error("Ack not received, ack timeout!");
          // TODO: should we just reset and hope for the best? maybe trigger a sync?
          // ackRecievedLock.pendingMessage = false;
          arduino.ackTimeout();
        }
      }
    }
  }
  
  public void ackReceived(int function) {
    synchronized (ackRecievedLock) {
      ackRecievedLock.pendingMessage = false;
      ackRecievedLock.notifyAll();
    }
  }
  
  public int getMethod(){
    return method;
  }
  

  public void add(int value) {
    sendBuffer[sendBufferSize] = (value & 0xFF);
    sendBufferSize += 1;
  }
  
  public int[] getBuffer() {    
    return sendBuffer;
  }
  
  public static void main(String[] args) {
    try {
      // FIXME - Test service started or reference retrieved
      // FIXME - subscribe to publishError
      // FIXME - check for any error
      // FIXME - basic design - expected state is connected and ready -
      // between classes it
      // should connect - also dumping serial comm at different levels so
      // virtual arduino in
      // Python can model "real" serial comm
      String port = "COM10";
      LoggingFactory.init(Level.INFO);
      /*
      Runtime.start("gui","SwingGui");
      VirtualArduino virtual = (VirtualArduino)Runtime.start("varduino","VirtualArduino");
      virtual.connectVirtualUart(port, port + "UART");
      */
      %javaArduinoClass% arduino = (%javaArduinoClass%)Runtime.start("arduino","%javaArduinoClass%");
      Servo servo01 = (Servo)Runtime.start("servo01","Servo");
      /*
      arduino.connect(port);
      // test pins
      arduino.enablePin(5);
      arduino.disablePin(5);
      // test status list enabled
      arduino.enableBoardStatus(true);
      servo01.attach(arduino, 8);
      servo01.moveTo(30);
      servo01.moveTo(130);
      arduino.enableBoardStatus(false);
      */
      // test ack
      // test heartbeat
    } catch (Exception e) {
      log.error("main threw", e);
    }
  }

  public void onConnect(String portName) {
    if (debug) {
      log.info("On Connect Called in Msg.");
    }
    // reset the parser...
    this.byteCount = new AtomicInteger(0);
    this.msgSize = 0;
    ackReceived(-1);
  }

  public void onDisconnect(String portName) {
    if (debug) {
      log.info("On Disconnect Called in Msg.");
    }
    // reset the parser... this might not be necessary.
    this.byteCount = new AtomicInteger(0);
    this.msgSize = 0;
    ackReceived(-1);
  }

  public static boolean isFullMessage(byte[] bytes) {
    // Criteria that a sequence of bytes could be parsed as a complete message.
    // can't be null
    if (bytes == null) 
      return false;
    // it's got to be at least 3 bytes long.  magic + method + size
    if (bytes.length <= 2) 
      return false;
    // first byte has to be magic
    if ((bytes[0] & 0xFF) != Msg.MAGIC_NUMBER) 
      return false;
    
    int method = bytes[1] & 0xFF;
    String strMethod = Msg.methodToString(method); 
    // only known methods. 
    // TODO: make the methodToString return null for an unknown lookup.
    if (strMethod.startsWith("ERROR")) 
      return false;
    
    // now it's got to be the proper length
    int length = bytes[1] & 0xFF;
    // max message size is 64 bytes
    if (length > 64)
      return false;

    // it's a exactly a full message or a message and more.
    if (bytes.length >= length+2)
      return true;

    
    return false;
  }

  public boolean isClearToSend() {
    return clearToSend;
  }
  
  public void setInvoke(boolean b){	
    invoke = b;	
  }

}
